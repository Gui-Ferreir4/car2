import streamlit as st
import pandas as pd
from modulos.utilitarios import sanitizar_coluna, calcular_estatisticas, avaliar_status

def analisar(df: pd.DataFrame, modelo: str, combustivel: str, valores_ideais: dict) -> dict:
    """
    Analisa o sensor MAP (Manifold Absolute Pressure) em Volts e kPa.
    Verifica varia√ß√£o e consist√™ncia com as faixas ideais.
    """
    colunas = ["MAP(V)", "MAP.OBDII(kPa)"]
    resultados = {}
    mensagens = []
    status_geral = "OK"

    for coluna in colunas:
        serie = sanitizar_coluna(df, coluna)
        estat = calcular_estatisticas(serie)

        faixa_ideal = (
            valores_ideais
            .get(modelo, {})
            .get(combustivel, {})
            .get(coluna, {})
        )

        status = avaliar_status(estat["m√©dia"], faixa_ideal)
        if status == "Alerta":
            status_geral = "Alerta"

        resultados[coluna] = {
            "estatisticas": estat,
            "status": status,
        }

        # Criar mensagens interpretativas
        if serie.empty:
            mensagens.append(f"{coluna}: sem dados v√°lidos.")
        else:
            variacao = estat["m√°ximo"] - estat["m√≠nimo"] if estat["m√°ximo"] is not None else None
            if variacao is not None and variacao < 1:
                mensagens.append(f"{coluna}: baixa varia√ß√£o ‚Üí sensor possivelmente travado.")
                status_geral = "Alerta"
            else:
                mensagens.append(f"{coluna}: m√©dia={estat['m√©dia']}, varia√ß√£o={round(variacao,2) if variacao else '-'}")

    # --- Checagem cruzada MAP em V e kPa ---
    serie_volts = sanitizar_coluna(df, "MAP(V)")
    serie_kpa = sanitizar_coluna(df, "MAP.OBDII(kPa)")

    correlacao = None
    if not serie_volts.empty and not serie_kpa.empty:
        correlacao = serie_volts.corr(serie_kpa)
        if correlacao and correlacao < 0.8:
            mensagens.append("‚ö†Ô∏è MAP: baixa correla√ß√£o entre V e kPa ‚Üí poss√≠vel problema no sensor ou convers√£o.")
            status_geral = "Alerta"

    return {
        "status": status_geral,
        "mensagem": " | ".join(mensagens),
        "valores": resultados,
        "correlacao_V_kPa": round(correlacao, 3) if correlacao else None
    }


def exibir(resultado: dict):
    """Exibe os resultados da an√°lise do sensor MAP no Streamlit"""
    st.subheader("üå°Ô∏è An√°lise do Sensor MAP")

    status = resultado.get("status", "erro")
    mensagem = resultado.get("mensagem", "")

    # Mensagem geral
    if status == "OK":
        st.success(mensagem)
    elif status == "Alerta":
        st.warning(mensagem)
    else:
        st.error(mensagem)

    # Exibir estat√≠sticas organizadas
    valores = resultado.get("valores", {})
    for coluna, dados in valores.items():
        estat = dados.get("estatisticas", {})
        st.markdown(f"**{coluna}** ‚Äî Status: {dados.get('status','-')}")
        if estat.get("m√©dia") is not None:
            col1, col2, col3 = st.columns(3)
            col1.metric("M√©dia", estat["m√©dia"])
            col2.metric("M√≠nimo", estat["m√≠nimo"])
            col3.metric("M√°ximo", estat["m√°ximo"])

    # Exibir correla√ß√£o entre V e kPa
    correlacao = resultado.get("correlacao_V_kPa")
    if correlacao is not None:
        st.caption(f"Correla√ß√£o MAP(V) x MAP(kPa): {correlacao}")
